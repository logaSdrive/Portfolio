What is Simplex:
It is a wheel reinvented. To describe it, let be an component. For example a Person. Person has a JSON representation: Person {name: "me", id: "1"}. And an HTML representation:

	<p>Im a person and my name is:</p>
	<p>me</p>
	<p>I have an id and it is:</p>
	<p>1</p>

You want to bind thesse representations to each others. And it's why Simplex was reinvented. To bind them by using Simplex you should declare on it's (Person's) html representation "entry points" for the Person attribute values (name, id) and define the way they will be connected to it's JSON representation. To declary the "entry points" you should use the keywords val and you should add the exact name of the attribute as it wrote in JSON representation with a dot(.) between them. Like val.id or val.name. And you should wrapped it by a double figure brackets: {{val.id}}. So in my example it would be as:

	<p>Im a person and my name is:</p>
	<p>{{val.name}}</p>
	<p>I have an id and it is:</p>
	<p>{{val.id}}</p>

But thats not all. You also should define the way they will be connected to it JSON represnation: use the keyword ref, add a dot(.) and than a give it a name (should start with a word symbol and may end with number, should be unique, may consist a multiple "leafs" like: ref.name.first and ref.name.last). And than you should bind it to id of the desirable HTML element (by default it is html id element, but actually you can bind at to any properties, but it is more complicated (cauze my wheel supports an addons and you can write an addon for that purpose). It should be wrapped first by a double figure brackets and than by a double quotation. In my example it would be:

	<p>Im a person and my name is:</p>
	<p id="{{ref.name}}">{{val.name}}</p>
	<p>I have an id and it is:</p>
	<p id="{{ref.id}}">{{val.id}}</p>

At the end: you should bind the key ref - ref.root - to parent element wich should be used as a container to the HTML represenation of the component:

<div id="{{ref.root}}">
	<p>Im a person and my name is:</p>
	<p id="{{ref.name}}">{{val.name}}</p>
	<p>I have an id and it is:</p>
	<p id="{{ref.id}}">{{val.id}}</p>
</div>

You component is ready. Run a SimlexC.main with a parameter which is a full name to your file where it's HTML representation was saved. After you run it, it will produce a Simplex.js file in a directory "files". In my case it is:

var Simplex = {
	getAncestor : function(path) {
		var id = path.slice(path.lastIndexOf(":") + 1);
		var ancestor ={};
		path = path.slice(0, path.lastIndexOf(":"));
		path = path.slice(0, path.lastIndexOf(":"));
		ancestor.position = path.slice(0, path.lastIndexOf(":"));
		switch (path.slice(path.lastIndexOf(":") + 1)) {
		case "Person":
			ancestor.component = Simplex.Person;
			ancestor.obj = ancestor.component.get(id, ancestor.position);
			return ancestor;
		default:
			return null;
		}
	},
	setSpot : function(position, component) {
		var spot = Simplex.getSpot(position, component);
		if (spot == null) {
			spot = {
				counter : 1,
				id : component.spots.length,
				position : position,
			};
			component.spots.push(spot);
		} else {
			spot.counter++;
		}
	},
	freeSpot : function(position, component, power) {
		var spot = Simplex.getSpot(position, component);
		if (spot != null && (spot.counter-- == 1 || power)) {
			component.spots.splice(spot.id, 1);
			for (i = spot.id; i < component.spots.length; i++) {
				component.spots[i].id -=1;
			}
		}
	},
	getSpot : function(position, component) {
		var i = component.spots.length;
		while (i-- > 0) {
			if (component.spots[i].position == position) {
				return component.spots[i];
			}
		}
		return null;
	},
	Person : {
		name : "Person",
		spots : [],
		ref : function(prefix, sufix) {
			prefix = prefix + ":Person";
			
			this.id = prefix + ":id:" + sufix;
			this.name = prefix + ":name:" + sufix;
			this.root = prefix + ":" + sufix;
		},
		create : function(obj, position) {
			var val = obj;
			var ref = new this.ref(position, val.id);
			var container = document.createElement('div');
			container.innerHTML ='<div id="'+ref.root+'"><p>Im a person and my name is:</p><p id="'+ref.name+'">'+val.name+'</p><p>I have an id and it is:</p><p id="'+ref.id+'">'+val.id+'</p></div>';
			document.getElementById(position).appendChild(container.firstChild);
			Simplex.setSpot(position, Simplex.Person);
		},
		get : function(id, position) {
			if (document.getElementById(position + ":Person:" + id) == null)
				return;
			var ref = new this.ref(position, id);
			var val = {};
			val.name=document.getElementById(ref.name).innerHTML;
			val.id=document.getElementById(ref.id).innerHTML;
			return val;
		},
		update : function(val, position) {
			if (document.getElementById(position + ":Person:" + val.id) == null)
				return;
			var ref = new this.ref(position, val.id);
			document.getElementById(ref.id).innerHTML=val.id;
			document.getElementById(ref.name).innerHTML=val.name;
		},
		remove : function(id, position) {
			var element = document.getElementById(position + ":Person:" + id);
			if (element != null)
				document.getElementById(position).removeChild(element);
				Simplex.freeSpot(position, Simplex.Person, false);
		}
	}
}

You can see the Person as an inner object of a Simplex object js and it has 4 CRUD method (create, get, update and removes). 

Function create recivies two paramateres: obj - a JSON representation of a Person like obj={name: "me", id: "1"}, and a position - the id of the element where you want to place a Person HTML represntation (like an div element which is a "PersonsList"). Than you invoke the function - it will creates an HTML components for a Person and place it as a child (for example) in "PersonList" element (if there are another childs it will adds it as a last child).

Function get recivies two parameteres: id - there is some important rule - as you can see the id value used almost in every Simplex function. So you should care that any components has attribute called id in it's JSON represenation as well. And the position (in my example it a "PersonList"). Than you invoke the function - it will return a JSON representation of the component (in my example: {name: "me", id: "1"}).

Function update - updates the components (parameter vals==obj== (for example){name: "not me", id: "1"}).

Function remove - deletes the components from the page.

So that as simple as i can tell about the Simplex. But actually there is more. I used it to build a nested components, to work with some abstraction level with a "similar" components, to extend (by it's modularity) some Simplex capabilities (to add different ref's type and shortcuts), to include some js code, which will be executed than a component will be created. So it more complex.
